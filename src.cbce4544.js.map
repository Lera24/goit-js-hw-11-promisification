{"version":3,"sources":["index.js"],"names":["delay","ms","Promise","resolved","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","username","updatedUsers","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":";AAEA,MAAMA,EAAQC,GACL,IAAIC,QAASC,IAClBC,WAAY,KAAQD,EAAUF,IAC3BA,KAKDI,EAASC,GAAQC,QAAQC,sBAAsBF,OAGrDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAIjB,MAAMK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,IAGtBC,EAAkB,CAACC,EAAUC,KACzBC,MAAAA,EAAeF,EAASG,IAAIC,GAChCA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,GAEpD,OAAA,IAAIhB,QAASC,IACZa,GACAb,EAAUa,MAU1BH,EAAgBH,EAAO,SAASD,KAAKF,QAAQY,OAC7CN,EAAgBH,EAAO,QAAQD,KAAKF,QAAQY,OAI3C,MAAMC,EAA4B,CAACC,EAAKC,IAChCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAmBC,IACjB3B,MAAAA,EAAQoB,EAA0B,IAAK,KAEtC,OAAA,IAAIlB,QAAS,CAACC,EAAUyB,KAC3BxB,WAAW,KACYmB,KAAKE,SAAW,GAG/BtB,EAAS,CAAE0B,GAAIF,EAAYE,GAAIvB,KAAMN,IAErC4B,EAAOD,EAAYE,KAEtB7B,MAIL8B,EAAa,EAAGD,GAAAA,EAAIvB,KAAAA,MACxBC,QAAQC,mBAAmBqB,kBAAmBvB,QAG1CyB,EAAWF,IACftB,QAAQyB,qCAAqCH,+BAU/CH,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAChEL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAChEL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,KAAMxB,KAAKqB,GAAYI,MAAMH,GAC/DL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH","file":"src.cbce4544.js","sourceRoot":"../src","sourcesContent":["///Задача № 1\n\nconst delay = ms => {\n  return new Promise (resolved => {\n    setTimeout (() => { resolved (ms)\n    }, ms)\n\n  });\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n //Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n\n///Задание № 2\n\nconst users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: false },\n  ];\n  \nconst toggleUserState = (allUsers, username) => {\n    const updatedUsers = allUsers.map(user =>\n      user.name === username ? { ...user, active: !user.active } : user\n    );\n        return new Promise (resolved => {\n            if (updatedUsers) {\n                resolved (updatedUsers);\n            }\n        })\n  };\n  \n  // Currently the function works like this\n // toggleUserState(users, 'Mango', console.table);\n // toggleUserState(users, 'Ajax', console.table);\n  \n  // The function should work like this\ntoggleUserState(users, 'Mango').then(console.table);\ntoggleUserState(users, 'Ajax').then(console.table);\n\n // Задача № 3\n\n const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n  const delay = randomIntegerFromInterval(200, 500);\n\n  return new Promise ((resolved, reject) => {\n      setTimeout(() => {\n          const canProcess = Math.random() > 0.3;\n      \n          if (canProcess) {\n              resolved({ id: transaction.id, time: delay });\n          } else {\n              reject(transaction.id);\n          }\n        }, delay);\n  });\n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n// Currently the function works like this\n//makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n//makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n//makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n//makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n\n// The function should work like this\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n"]}